# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - src/Monolith

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryEndpoint: 'PhuThuongStickyRice'
  dockerComposeFile: 'src/Monolith/docker-compose.yml'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: SonarCloud
  displayName: SonarCloud
  jobs:  
  - job: SonarCloud
    displayName: SonarCloud
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'phongnguyend'
        scannerMode: 'MSBuild'
        projectKey: 'Practical.CleanArchitecture'
        projectName: 'Practical.CleanArchitecture'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'src/Monolith/PhuThuongStickyRice.Monolith.sln'
    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

- stage: WhiteSourceBolt
  displayName: Build and Run WhiteSource Bolt
  jobs:  
  - job: WhiteSourceBolt
    displayName: Build and Run WhiteSource Bolt
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'src/Monolith/PhuThuongStickyRice.Monolith.sln'
    - task: WhiteSource Bolt@20
      inputs:
        cwd: 'src/Monolith/'

- stage: DotNetBuild
  displayName: .Net Build
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: UseDotNet@2
        displayName: Use .Net 6.0.x
        inputs:
          packageType: 'sdk'
          version: '6.0.x'
      - task: DotNetCoreCLI@2
        displayName: dotnet restore
        inputs:
          command: 'restore'
          projects: 'src/Monolith/PhuThuongStickyRice.Monolith.sln'
          feedsToUse: 'select'
      - task: DotNetCoreCLI@2
        displayName: dotnet list package --vulnerable
        inputs:
          command: 'custom'
          custom: 'list'
          arguments: 'package --vulnerable'
          workingDirectory: 'src/Monolith'
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: 'build'
          arguments: '--configuration Release'
          workingDirectory: 'src/Monolith'
      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: 'test'
          projects: |
            src/Monolith/PhuThuongStickyRice.ArchTests/*.csproj
            src/Monolith/PhuThuongStickyRice.ContractTests/*.csproj
            src/Monolith/PhuThuongStickyRice.UnitTests/*.csproj
          arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
      - task: reportgenerator@4
        displayName: Generate Test Report
        inputs:
          reports: '$(Build.SourcesDirectory)/**/*.cobertura.xml'
          targetdir: '$(Build.SourcesDirectory)/CoverageResults'
          assemblyfilters: '+PhuThuongStickyRice.Application;+PhuThuongStickyRice.Domain'
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Code Coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/CoverageResults/Cobertura.xml'
      - task: DotNetCoreCLI@2
        displayName: Publish
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: |
            src/Monolith/PhuThuongStickyRice.BackgroundServer/*.csproj
            src/Monolith/PhuThuongStickyRice.GraphQL/*.csproj
            src/Monolith/PhuThuongStickyRice.Migrator/*.csproj
            src/Monolith/PhuThuongStickyRice.WebAPI/*.csproj
            src/Monolith/PhuThuongStickyRice.IdentityServer/*.csproj
            src/Monolith/PhuThuongStickyRice.WebMVC/*.csproj
            src/Monolith/PhuThuongStickyRice.BlazorServerSide/*.csproj
            src/Monolith/PhuThuongStickyRice.BlazorWebAssembly/*.csproj
          arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'Monolith'
          publishLocation: 'Container'

- stage: DockerBuild
  displayName: Build and Push Docker Images
  jobs:  
  - job: Build
    displayName: Build and Push
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DockerCompose@0
      displayName: Build services
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: $(dockerRegistryEndpoint)
        dockerComposeFile: $(dockerComposeFile)
        action: 'Build services'
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        additionalImageTags: $(Build.BuildId)
    - task: DockerCompose@0
      displayName: Push services
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: $(dockerRegistryEndpoint)
        dockerComposeFile: $(dockerComposeFile)
        action: 'Push services'
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        additionalImageTags: $(Build.BuildId)

- stage: Octopus
  displayName: 'Octopus: Pack and Push Nuget Packages'
  jobs:  
  - job: Build
    displayName: Build and Push
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: CmdLine@2
      displayName: dotnet tool install Octopus.DotNet.Cli --global
      inputs:
        script: 'dotnet tool install Octopus.DotNet.Cli --global'
    - task: DotNetCoreCLI@2
      displayName: dotnet restore
      inputs:
        command: 'restore'
        projects: 'src/Monolith/PhuThuongStickyRice.Monolith.sln'
        feedsToUse: 'select'
    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        command: 'build'
        arguments: '--configuration Release'
        workingDirectory: 'src/Monolith'
    - task: DotNetCoreCLI@2
      displayName: dotnet publish
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: |
          src/Monolith/PhuThuongStickyRice.BackgroundServer/*.csproj
          src/Monolith/PhuThuongStickyRice.GraphQL/*.csproj
          src/Monolith/PhuThuongStickyRice.Migrator/*.csproj
          src/Monolith/PhuThuongStickyRice.WebAPI/*.csproj
          src/Monolith/PhuThuongStickyRice.IdentityServer/*.csproj
          src/Monolith/PhuThuongStickyRice.WebMVC/*.csproj
          src/Monolith/PhuThuongStickyRice.BlazorServerSide/*.csproj
          src/Monolith/PhuThuongStickyRice.BlazorWebAssembly/*.csproj
        arguments: '--configuration Release -p:Version=1.0.0-$(Build.BuildNumber) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: false

    - task: CmdLine@2
      displayName: dotnet octo pack
      inputs:
        script: |
          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=PhuThuongStickyRice.BackgroundServer --basePath=$(Build.ArtifactStagingDirectory)/PhuThuongStickyRice.BackgroundServer
          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=PhuThuongStickyRice.GraphQL --basePath=$(Build.ArtifactStagingDirectory)/PhuThuongStickyRice.GraphQL
          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=PhuThuongStickyRice.Migrator --basePath=$(Build.ArtifactStagingDirectory)/PhuThuongStickyRice.Migrator
          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=PhuThuongStickyRice.WebAPI --basePath=$(Build.ArtifactStagingDirectory)/PhuThuongStickyRice.WebAPI
          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=PhuThuongStickyRice.BlazorServerSide --basePath=$(Build.ArtifactStagingDirectory)/PhuThuongStickyRice.BlazorServerSide
          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=PhuThuongStickyRice.BlazorWebAssembly --basePath=$(Build.ArtifactStagingDirectory)/PhuThuongStickyRice.BlazorWebAssembly
          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=PhuThuongStickyRice.IdentityServer --basePath=$(Build.ArtifactStagingDirectory)/PhuThuongStickyRice.IdentityServer
          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=PhuThuongStickyRice.WebMVC --basePath=$(Build.ArtifactStagingDirectory)/PhuThuongStickyRice.WebMVC
    - task: DotNetCoreCLI@2
      displayName: dotnet nuget push
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '649b11e9-9f40-41ae-bf73-6d93e3161e2c/24cbed38-cd60-4d56-bad6-7c5d18f75a60'